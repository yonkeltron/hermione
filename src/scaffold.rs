use anyhow::{anyhow, Result};
use git2::Config;
use paris::Logger;

use std::collections::HashMap;
use std::fs;
use std::path::{Path, PathBuf};

use crate::file_mapping_definition::FileMappingDefinition;
use crate::hooks::Hooks;
use crate::manifest::Manifest;

/// Scaffold is responsible for creating `hermione.yml` files and new Hermione package directories
pub struct Scaffold {
    pub manifest: Manifest,
    pub package_path_buf: PathBuf,
}

impl Scaffold {
    /// Returns an instance of Scaffold with a default Manifest for creating a `hermione.yml` file.
    pub fn new(package_name: &str, package_id: &str) -> Self {
        let default_author = String::from("<Author Name>");
        let default_description = format!(
            "Manifest file generated by Hermione ({}). Visit the docs at https://hermione.dev",
            env!("CARGO_PKG_VERSION")
        );
        let author = match Config::open_default() {
            Ok(conf) => {
                let author_name = conf.get_string("user.name").unwrap_or(default_author);
                let author_email = conf
                    .get_string("user.email")
                    .unwrap_or_else(|_| String::from(""));
                format!("{} <{}>", author_name, author_email)
            }
            Err(_) => default_author,
        };

        let package_path = Path::new(&package_name);
        let parsed_package_name = match package_path.file_stem() {
            Some(stem) => String::from(stem.to_string_lossy()),
            None => String::from("<Package Name>"),
        };

        Self {
            package_path_buf: package_path.to_path_buf(),
            manifest: Manifest {
                author,
                name: parsed_package_name,
                description: default_description,
                id: String::from(package_id),
                mappings: vec![
                    FileMappingDefinition::new(
                        String::from("sample.txt"),
                        String::from("{{HOME}}/sample.txt"),
                        None,
                        None,
                    ),
                    FileMappingDefinition::new(
                        String::from("config.toml"),
                        String::from("/tmp/absolute/path/to/dir/config.toml"),
                        Some(String::from("unix")),
                        None,
                    ),
                ],
                hooks: Some(Hooks {
                    pre_install: Some(String::from("echo Hello from pre-install hook")),
                    post_install: Some(String::from("echo Hello from post-install hook")),
                    pre_remove: Some(String::from("echo Hello from pre-remove hook")),
                    post_remove: Some(String::from("echo Hello from post-remove hook")),
                }),
            },
        }
    }

    /// Creates a package directory with a sample `hermione.yml` file and a couple of sample files to correspond with it.
    pub fn create_package(&self) -> Result<()> {
        let mut logger = Logger::new();
        logger.info(format!(
            "Creating package directory {}",
            &self.manifest.name
        ));

        match fs::create_dir_all(&self.package_path_buf) {
            Ok(_) => {
                logger.info(format!(
                    "Successfully created package directory {}",
                    self.manifest.name.clone()
                ));
                self.create_manifest(self.package_path_buf.to_path_buf())?;
                self.create_example_files()?;
                Ok(())
            }
            Err(e) => {
                logger.error(format!(
                    "Could not create package directory {}",
                    self.package_path_buf.display()
                ));
                Err(anyhow!(e))
            }
        }
    }

    /// Creates the `hermione.yml` file from the Manifest struct and writes it to the given PathBuf.
    ///
    /// ### Arguments
    ///
    /// * path - PathBuf of where to write the `hermione.yml` file
    /// * logger - Borrowed Logger instance
    ///
    /// Returns an Empty Result.
    pub fn create_manifest(&self, path: PathBuf) -> Result<()> {
        let mut logger = Logger::new();
        logger.info("Creating manifest file");

        let hermione_string = serde_yaml::to_string(&self.manifest)?;
        let hermione_manifest_path = path.join("hermione.yml");

        if hermione_manifest_path.is_file() {
            logger.error("hermione.yml already exists in current directory, will not overwrite");
            Err(anyhow!("hermione.yml exists in current directory"))
        } else {
            fs::write(&hermione_manifest_path, hermione_string)?;
            logger.info(format!(
                "Successfully created hermione manifest file {}",
                hermione_manifest_path.display()
            ));
            Ok(())
        }
    }

    /// Creates the Hermione sample files.
    ///
    /// ### Arguments
    ///
    /// * logger - Borrowed Logger instance
    ///
    /// Returns an Empty Result.
    fn create_example_files(&self) -> Result<()> {
        let mut logger = Logger::new();
        logger.loading("Creating example files");

        let mut sample_files = HashMap::new();

        sample_files.insert("sample.txt", "Sample Text File Generated by Hermione");
        sample_files.insert(
            "config.toml",
            "description = \"Sample Config File Generated by Hermione\"",
        );

        for (file_name, file_content) in sample_files.iter() {
            fs::write(self.package_path_buf.join(file_name), file_content)?;
        }

        logger.success("Finished creating example files");
        Ok(())
    }
}
